#include "../Scenes/Common/CompositeScene.cpp"
#include "../Scenes/Media/LatexScene.cpp"
#include "../Scenes/Connect4/Connect4Scene.cpp"
#include "../Scenes/Connect4/Connect4GraphScene.cpp"
#include "../DataObjects/Connect4/TreeValidator.cpp"

void render_video() {
    c4.inject_audio_and_render(AudioSegment("We also learned that the game can be represented as a tree, but that tree is way to big to be interpretable or memorizable by a human."));
    c4.inject_audio_and_render(AudioSegment("Our goal for today is to combine these two ideas to come up with a holistic perspective which allows us to express this big tree as a much smaller tree."));
    c4.inject_audio_and_render(AudioSegment("In other words, this tree stores information in a redundant or compressable fashion."));
    c4.inject_audio_and_render(AudioSegment("Our task is to come up with a language which will compress that redundant information."));
    c4.inject_audio_and_render(AudioSegment("We looked at positions where Yellow was winning, and merely needed to always play on the even rows only to guarantee a win."));
    c4.inject_audio_and_render(AudioSegment("Now, remember that Red is favored to win in Connect 4. So, if we want to describe optimal play, we should really be more concerned with what Red is doing."));
    c4.inject_audio_and_render(AudioSegment("Remembering that Red, Player 1, is relegated to odd rows in the endgame, it should be clear that ClaimEven is not a sufficient strategy for Red."));
    c4.inject_audio_and_render(AudioSegment("We thus need a few other rather simple local behavioral instructions to be able to tell Red what to do."));
    c4.inject_audio_and_render(AudioSegment("Naturally, something that Red may want to do is the opposite of ClaimEven. That is, ClaimOdd."));
    //PRINT_TO_TERMINAL = false;
    //SAVE_FRAME_PNGS = false;

    CompositeScene cs;
    Graph<C4Board> g;
    C4GraphScene gs(&g, variation, TRIM_STEADY_STATES);
    gs.surfaces_override_unsafe = true;
    LatexScene ls_opening(latex_text("Opening: "+variation), 1, .2, .1);
    LatexScene ls_size(latex_text("Node count: "+to_string(g.size())), 1, .2, .1);
    C4Scene c4s(variation, .2, .4);
    cs.add_scene(&gs, "gs");
    cs.add_scene(&ls_opening, "ls_opening", .1, .05);
    cs.add_scene(&ls_size, "ls_size", .1, .12);
    cs.add_scene(&c4s, "c4s", .1, .26);
    //ValidateC4Graph(g);

    StateSet state{
        {"q1", "<t> .1 * cos"},
        {"qi", "0"},
        {"qj", "<t> .1 * sin"},
        {"qk", "0"},
        {"surfaces_opacity", "0"},
        {"points_opacity", "0"},
        {"physics_multiplier", "30"},
    };
    gs.state_manager.set(state);
    cs.inject_audio_and_render(AudioSegment("This is the solution to connect 4,"));
    cs.inject_audio_and_render(AudioSegment("and you're among the first people to ever see it."));
    cs.inject_audio_and_render(AudioSegment("Don't get me wrong, I'm not the first person to have solved connect 4,"));
    cs.inject_audio_and_render(AudioSegment("but I am the first to have graphed it out like this."));
    cs.inject_audio_and_render(AudioSegment("It turns out this is quite technically difficult,"));
    cs.inject_audio_and_render(AudioSegment("and you need a good understanding of not only the computer science of game-solving,"));
    cs.inject_audio_and_render(AudioSegment("but furthermore the underlying logic behind connect 4 itself to do this."));
    cs.inject_audio_and_render(AudioSegment("To give you a taste, let's make a solution tree for Tic Tac Toe as player 1."));
    cs.inject_audio_and_render(AudioSegment("We start with an empty tic tac toe board,"));
    cs.inject_audio_and_render(AudioSegment("and we suggest the center as X's best move."));
    cs.inject_audio_and_render(AudioSegment("Now, O has 8 possible responses."));
    cs.inject_audio_and_render(AudioSegment("In each of those cases, we recommend a move for X,"));
    cs.inject_audio_and_render(AudioSegment("and then for each one O has 6 responses,"));
    cs.inject_audio_and_render(AudioSegment("and so on."));
    cs.inject_audio_and_render(AudioSegment("So, now that we've effectively done all of the work ahead of time,"));
    cs.inject_audio_and_render(AudioSegment("someone else can come and memorize this graph,"));
    cs.inject_audio_and_render(AudioSegment("and just follow the branches in order to play perfect tic tac toe."));
    cs.inject_audio_and_render(AudioSegment("There's just one problem- this is a lot of information to memorize."));
    cs.inject_audio_and_render(AudioSegment("Luckily, these two guys came up with a simpler algorithm."));
    cs.inject_audio_and_render(AudioSegment("Just 8 guidelines in written english."));
    cs.inject_audio_and_render(AudioSegment("If you follow them, the best possible result will arise."));
    cs.inject_audio_and_render(AudioSegment("So, both of these two things here are strategies for tic tac toe."));
    cs.inject_audio_and_render(AudioSegment("But the right one is extra nice, because it illuminates some general strategic principles."));
    cs.inject_audio_and_render(AudioSegment("This begs the question- can we make similar rules for connect 4?"));
    cs.inject_audio_and_render(AudioSegment("To recap this series, we have learned about a number of different strategies- different perspectives from which we can look at Connect 4."));
    cs.inject_audio_and_render(AudioSegment("We learned about Claimeven, which tells us that there exist some rare positions where a certain player can adopt a naive strategy of always playing directly on top of their opponent."));
    cs.inject_audio_and_render(AudioSegment("We learned about parity and threat analysis, which showed us that carefully managing whether our threats are on even or odd rows, we can create a favorable endgame."));
    cs.inject_audio_and_render(AudioSegment("And, finally, we adopted a graph-theoretical perspective, and saw how we can perform search over the tree of connect-4 positions."));
    cs.inject_audio_and_render(AudioSegment("Uniting all of these different pers"));
    cs.inject_audio_and_render(AudioSegment("Ok, I'll stop leading you on- here it is."));
    cs.inject_audio_and_render(AudioSegment("But first, you need to know what a Steady State is."));
    cs.inject_audio_and_render(AudioSegment("In a position like this, which obeys Claimeven, Red can continue by "));
    cs.inject_audio_and_render(AudioSegment(""));






// Talk about the tree, and how steadystates are sparsely placed on that tree.
    cs.inject_audio_and_render(AudioSegment("Some people have commented that this is all pointless- that connect 4 is solved, it's a closed case."));
    cs.inject_audio_and_render(AudioSegment("And, speaking as someone who has independently solved connect 4 using a novel method,"));
    cs.inject_audio_and_render(AudioSegment("this is dead wrong."));
    cs.inject_audio_and_render(AudioSegment("Not only is there an infinitude of technical details of this simple game that we don't have answers to, and plenty that in my opinion we may never have answers to,"));
    cs.inject_audio_and_render(AudioSegment("but all of them are just reverberations of that one pesky bedrock problem that seemingly lies at the bottom of everything:"));
    cs.inject_audio_and_render(AudioSegment("What is the nature of emergent systems?"));
    cs.inject_audio_and_render(AudioSegment("How can it be that a game with rules simple enough to teach to schoolchildren took mathematicians until the mid 1980s to tell us who should win"));
    cs.inject_audio_and_render(AudioSegment("How can it be that such a game gives rise to all of these bizarre behaviors that demand an entire youtube explainer series along with esoteric German or Japanese words like Zugzwang and Miai to describe them?"));
    cs.inject_audio_and_render(AudioSegment("The rules are simple! Why is there any mystery here???"));
    cs.inject_audio_and_render(AudioSegment("Such is the problem of mathematics."));
    cs.inject_audio_and_render(AudioSegment("We can come up with a set of axioms, but that doesn't mean we know their results."));
    cs.inject_audio_and_render(AudioSegment("After all, the definition of a prime number can be stated concisely in one sentence,"));
    cs.inject_audio_and_render(AudioSegment("but to this day, their distribution is shrouded in mystery."));
    cs.inject_audio_and_render(AudioSegment("Even if we know the forces that guide particle interactions,"));
    cs.inject_audio_and_render(AudioSegment("that doesn't make it any more self-evident that an atom with 43 protons has no stable isotopes,"));
    cs.inject_audio_and_render(AudioSegment("or that this protein is particularly easy at adjoining to this thing which provides biological systems with an easy way to store and recover chemical energy (ATP)"));
    cs.inject_audio_and_render(AudioSegment("Simple rules do not imply obvious behavior."));
    cs.inject_audio_and_render(AudioSegment("Connect 4 provides a very unique combination of properties."));
    cs.inject_audio_and_render(AudioSegment("I hope I have driven home throughout this series that, just like Chess, just like any other sufficiently expressive system, connect 4 yields worlds of complexity beyond the mere language of its axioms."));
    cs.inject_audio_and_render(AudioSegment("Yet, somehow, it is just small enough that I can throw compute at the problem, and make formal mathematical claims that I can back up with actual data."));
    cs.inject_audio_and_render(AudioSegment("And that I can display to you in full!"));
    cs.inject_audio_and_render(AudioSegment("It carries within it that core kernel of emergence, yet on the 7x6 board size, remains just within reach,"));
    cs.inject_audio_and_render(AudioSegment("presenting the mathematician with a unique opportunity for just a glance of that elusive emergent substance."));
    cs.inject_audio_and_render(AudioSegment("This has been 2swap."));
}
